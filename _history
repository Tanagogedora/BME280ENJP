{"entries":[{"timestamp":1743722293716,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * makecode BME280 digital pressure and humidity sensor package.\n * \n * Based on original work from the MicroPython Chinese community:\n * http://www.micropython.org.cn\n * \n * Original License: MIT\n * Original Copyright (c)2018, microbit/micropython Chinese community\n * \n * Modified for MakeCode by Tanagotti, 2025\n */\n\n/**\n * Package for the BME280 digital weather sensor module\n * for microbit MakeCode.\n * Can measure temperature, pressure, and humidity. \n * Can also calculate dew point from temperature and humidity.\n * See README for detailed data such as measurement range.\n *\n * マイクロビット MakeCode 用 BME280 デジタル気象センサー\n * モジュール対応パッケージです。\n * 気温・気圧・湿度を測定できます。\n * また気温・湿度から露点を求めることができます。\n * 測定範囲など詳細なデータはREADMEをご覧ください。\n*/\n\n/**\n* BME280 block\n* \n* This namespace provides functions for interacting with the BME280\n* digital pressure and temperature sensor.\n* It includes functions to read temperature, pressure, and humidity, \n* control power modes, and configure the I2C address.\n* \n* BME280 センサー用のブロック群です。\n* 気温・気圧・湿度の取得や電源制御などを行います。\n*/\n\nnamespace BME280 {\n    //Enum Definitions / 列挙型の定義\n    //I2C address/I2Cアドレス\n    export enum BME280_I2C_ADDRESS {\n        //% block=\"0x76\"\n        ADDR_0x76 = 0x76,\n        //% block=\"0x77\"\n        ADDR_0x77 = 0x77\n    }\n\n    //Temperature Unit / 気温の単位\n    // Temperature units: C (Celsius) or F (Fahrenheit) / 温度単位：C（摂氏）または F（華氏）\n    export enum BME280_T {\n        //% block=\"C\"\n        T_C = 0,\n        //% block=\"F\"\n        T_F = 1\n    }\n\n    // Pressure Unit / 気圧の単位\n    // Pressure units: Pa or hPa / 単位：Pa（パスカル）または hPa（ヘクトパスカル）\n    enum BME280_P {\n        //% block=\"Pa\"\n        Pa = 0,\n        //% block=\"hPa\"\n        hPa = 1\n    }\n    /**\n     * Global variables to store the final compensated\n     * temperature, pressure and humidity \n     * temperature\t: unit  °C\n     * pressuere\t: unit Pa\n     * humidity\t\t: unit %\n     * \n     * グローバル変数：補正後の気温・気圧・湿度\n     * 単位　気温：℃　気圧：Pa　湿度：％\n     */\n    let T = 0;\n    let P = 0;\n    let H = 0;\n\n    // Default I2C address: 0x77 / デフォルトの I2C アドレス：0x77\n    let BME280_I2C_ADDR = BME280_I2C_ADDRESS.ADDR_0x76\n\n    // Defining Functions / 関数の定義\n    /** \n     * Functions \"Access to BME280 Registers\"\n     * BME280のレジスタへのアクセスを行う関数群\n     * A set of functions for reading from and writing to BME280\n     * registers via I2C communication.\n     * I2C 通信を用いて、各種レジスタへの読み書きを行う\n     */\n\n    /**\n     * Function \"Writes 1 byte from a register of the BME280\".\n     * BME280のレジスタに1バイトのデータを書き込む関数\n     *\n     * @param reg Register address (integer) / レジストリアドレス（整数値）\n     * @returns dat write (integer) / 書き込んだ値（整数値）\n     * @returns None/戻り値はない\n     *\n     * Creates a 2-byte buffer: the first byte is the register address (buf[0]),\n     * the second byte is the data to write (buf[1]), and sends it via I2C.\n     * レジスタアドレス（buf[0]）と書き込むデータ（buf[1]）を格納した2バイトのバッファを作成し、\n     * I2C を使ってデバイスに送信する。\n     */\n    function setreg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);\n    }\n\n    /**\n     * Function \"Reads 1 byte from a register of the BME280\".\n     * BME280の任意のレジスタから 1 バイトの値を読み取る関数。\n     *\n     * @param reg Register address (integer) / レジストリアドレス（整数値）\n     * @returns Value read (integer) / 読み取った値（整数値）\n     *\n     * Sends the register address via I2C using UInt8BE format,\n     * then reads 1 byte from the device.\n     * レジストリアドレスを UInt8BE 形式で送信し、1 バイトを読み取って返します。\n     */\n    function getreg(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);\n    }\n\n    /**\n     * Function \"Reads a 16-bit unsigned integer\".\n     * 8 ビットの符号付き整数を読み取る関数。\n     *\n     * Used for calibration parameters such as dig_H6..\n     * 補正パラメータ dig_H6 に使用。\n     *\n     * @param reg Register address / レジストリアドレス\n     * @returns Unsigned 8-bit integer / 符号付き8ビット整数\n       */\n    function getInt8LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);\n    }\n\n    /**\n     * Function \"Reads a 16-bit unsigned integer\".\n     * 16 ビットの符号なし整数を読み取る関数。\n     *\n     * Used for calibration parameters such as dig_T1, dig_P1, etc.\n     * dig_T1、dig_P1 などの補正パラメータ用に使用します。\n     *\n     * @param reg Register address / レジストリアドレス\n     * @returns Unsigned 16-bit integer / 符号なし 16 ビット整数\n       */\n    function getUInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);\n    }\n\n    /**\n       * Function \"Reads a 16-bit signed integer\".\n       * 16 ビットの符号付き整数を読み取る関数。\n       * \n       * Used for calibration parameters such as dig_T2, dig_T3, dig_P2.\n       * dig_T2、dig_T3、dig_P2 などの補正パラメータ用に使用します。\n     *\n       * @param reg Register address / レジストリアドレス\n       * @returns Signed 16-bit integer / 符号付き 16 ビット整数\n       */\n    function getInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);\n    }\n\n    // Function \"Get Tempratuer , Pressuer and humidity\".\n    // 気温・気圧・湿度取得の関数\n    /**\n         * BME280 calibration parameters for temperature, pressure and humidity.\n         * BME280 の温度・気圧・湿度補正用キャリブレーションパラメータ。\n     * \n         * Address range: 0x88 to 0xE7 (factory-programmed values)\n         * アドレス範囲：0x88 ～ 0xE7（工場出荷時に書き込まれた補正値）\n         * \n         * Common to BMP280 & BME280 sensors\n     * (excluding humidity-related registers 0xA1 to 0xE7)\n         * BMP280・BME280 センサーで共通\n     *（湿度関連のレジスタ 0xA1 ～ 0xE7は除く）\n         */\n    /**\n         * Set \"BME280 calibration parameter registers\"\n     * BME280温度・気圧・湿度補正用キャリブレーションパラメータのレジストリ　\n           * dig_T1 to dig_T3: temperature/気温補正\n     * dig_P1 to dig_P9: pressuere/気圧補正\n     * dig_H1 to dig_H6: humidity/湿度補正\n     */\n    // Temperature calibration parameters / 気温補正用パラメータ\n    let dig_T1 = getUInt16LE(0x88)\n    let dig_T2 = getInt16LE(0x8A)\n    let dig_T3 = getInt16LE(0x8C)\n\n    // Pressure calibration parameters / 気圧補正用パラメータ\n    let dig_P1 = getUInt16LE(0x8E)\n    let dig_P2 = getInt16LE(0x90)\n    let dig_P3 = getInt16LE(0x92)\n    let dig_P4 = getInt16LE(0x94)\n    let dig_P5 = getInt16LE(0x96)\n    let dig_P6 = getInt16LE(0x98)\n    let dig_P7 = getInt16LE(0x9A)\n    let dig_P8 = getInt16LE(0x9C)\n    let dig_P9 = getInt16LE(0x9E)\n\n    // Humidity calibration parameters / 湿度補正用パラメータ   \t\t\n    let dig_H1 = getreg(0xA1)\n    let dig_H2 = getInt16LE(0xE1)\n    let dig_H3 = getreg(0xE3)\n    let a = getreg(0xE5)\n    let dig_H4 = (getreg(0xE4) << 4) + (a % 16)\n    let dig_H5 = (getreg(0xE6) << 4) + (a >> 4)\n    let dig_H6 = getInt8LE(0xE7)\n\n    /**\n         * Sensor configuration:\n         * - Set humidity oversampling to x4 (ctrl_hum, 0xF2)\n         * - Set temperature oversampling to x16, pressure oversampling to x1, normal mode (ctrl_meas, 0xF4)\n         * - Set standby time to 250ms and filter coefficient to x4 (config, 0xF5)\n         *\n         * センサーの設定：\n         * - 湿度のオーバーサンプリングを4倍に設定（ctrl_hum、0xF2）\n         * - 温度のオーバーサンプリングを16倍、気圧を1倍、動作モードをノーマルに設定（ctrl_meas、0xF4）\n         * - スタンバイ時間を250ms、フィルター係数を4倍に設定（config、0xF5）\n         */\n    setreg(0xF2, 0x04)\n    setreg(0xF4, 0x2F)\n    setreg(0xF5, 0x0C)\n\n    /**\n     * Calculate Temperatuer , Pressure and Humidity\n         * 気温・気圧・湿度の算出\n         * Reads raw data from the sensor and calculates\n     * corrected temperature , pressure and humidity.\n         * センサーから生データを読み取り、\n     * 補正済みの気温・気圧・湿度を算出。\n         */\n    function get(): void {\n        // Calculate Temperatuer/気温の計算\n        // Read raw temperature data (20 bits)\n        // 温度の生データ（20ビット）読み取り\n        let adc_T = (getreg(0xFA) << 12) + (getreg(0xFB) << 4) + (getreg(0xFC) >> 4)\n        let var1 = (((adc_T >> 3) - (dig_T1 << 1)) * dig_T2) >> 11\n        let var2 = (((((adc_T >> 4) - dig_T1) * ((adc_T >> 4) - dig_T1)) >> 12) * dig_T3) >> 14\n        let t_fine = var1 + var2;\n        let temp = t_fine;\n        // Calculate corrected temperature, rounded to 2 decimal places\n        // 補正後の気温を計算（小数第2位で四捨五入）\n        T = Math.round(((temp * 5 + 128) / 256.0) / 100.0 * 100) / 100;\n\n        // Calculate Pressure/気圧の計算\n        // Read raw pressure data (20 bits)\n        // 気圧の生データ（20ビット）読み取り\n        let adc_P = (getreg(0xF7) << 12) + (getreg(0xF8) << 4) + (getreg(0xF9) >> 4);\n\n        // Pressure compensation calculation\n        // 気圧補正の計算\n        var1 = (t_fine >> 1) - 64000;\n        var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;\n        var2 = var2 + ((var1 * dig_P5) << 1);\n        var2 = (var2 >> 2) + (dig_P4 << 16);\n        var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2)) >> 13) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;\n        var1 = ((32768 + var1) * dig_P1) >> 15;\n        if (var1 == 0) {\n            return; // Prevent division by zero / 0除算防止\n        }\n        let _p = ((1048576 - adc_P) - (var2 >> 12)) * 3125;\n\n        // Round to 0.01 Pa/小数点第２位を四捨五入し0.1Paまで求める。\n        _p = Math.round((_p / var1) * 2 * 100) / 100;\n        var1 = (dig_P9 * (((_p >> 3) * (_p >> 3)) >> 13)) >> 12;\n        var2 = (((_p >> 2)) * dig_P8) >> 13;\n        P = _p + ((var1 + var2 + dig_P7) >> 4);\n\n        // Calculate Humidity/\t湿度の計算\n        // Read raw pressure data (16 bits)\n        // 湿度の生データ（16ビット）読み取り\n        let adc_H = (getreg(0xFD) << 8) + getreg(0xFE)\n        var1 = t_fine - 76800\n        var2 = (((adc_H << 14) - (dig_H4 << 20) - (dig_H5 * var1)) + 16384) >> 15\n        var1 = var2 * (((((((var1 * dig_H6) >> 10) * (((var1 * dig_H3) >> 11) + 32768)) >> 10) + 2097152) * dig_H2 + 8192) >> 14)\n        var2 = var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * dig_H1) >> 4)\n        if (var2 < 0) var2 = 0\n        if (var2 > 419430400) var2 = 419430400\n        // Round to 0.01% / 小数点第２位を四捨五入し0.1%まで求める \n        H = Math.round((var2 / 1024.0 / 1024.0) * 10) / 10\n    }\n\n    /**\n     *  Get pressure value from BME280 sensor\n         *  BME280 センサーから気圧を取得\n         * \n         *  @param u Pressure unit (Pa or hPa) / 気圧の単位（Pa または hPa）\n         *  @returns Pressure value / 気圧の値（単位に応じた小数第1位）\n         */\n    //% blockId=\"BME280_GET_PRESSURE\"\n    //% block=\"Pressuer /気圧 %u\"\n    //% weight=80 blockGap=8\n    export function pressure(u: BME280_P): number {\n        get();\n        if (u == BME280_P.Pa) {\n            // Pa:Round to the first decimal place/小数第1位で四捨五入\n            return Math.round(P * 10) / 10;\n        }\n        else {\n            // hPa:Round to the second decimal place/小数第2位で四捨五入\n            return Math.round((P / 100) * 10) / 10;\n        }\n    }\n\n    /**\n     * Get temperature value from BME280 sensor\n         * BME280 センサーから気温を取得します\n         *\n         * @param u Temperature unit (C or F) / 温度の単位（C または F）\n         * @returns Temperature value / 気温の値（単位に応じた小数第1位）\n         */\n    //% blockId=\"BME280_GET_TEMPERATURE\"\n    //% block=\"Tempratuere /気温 %u\"\n    //% weight=80 blockGap=8\n    export function temperature(u: BME280_T): number {\n        get();\n        if (u == BME280_T.T_C) {  //Celsius degree/摂氏\n            return Math.round(T * 10) / 10;\n        } else {\n            //Fahrenheit degree/華氏\t\n            let TF = T * 9 / 5 + 32;\n            return Math.round(TF * 10) / 10;\n        }\n    }\n\n    /**\n     * Get humidity value from BME280 sensor\n         * BME280 センサーから湿度を取得します\n         *\n         * @param u Humidity unit % / 湿度の単位 %\n         * @returns Temperature value / 湿度の値（小数第1位）\n         */\n    //% blockId=\"BME280_GET_HUMIDITY\" block=\"Humidity / 湿度 \"\n    //% weight=80 blockGap=8\n    export function humidity(): number {\n        get();\n        return H;\n    }\n    //Sensor power control (Power ON and OFF)\n    //センサーの電源管理（起動と停止）\n    /**\n     * power on　センサー起動\n       */\n    //% blockId=\"BME280_POWER_ON\" block=\"\n    //% block=\"Power On Sensor /センサー起動\"\"\n    //% weight=22 blockGap=8\n    export function PowerOn() {\n        setreg(0xF4, 0x2F)\n    }\n\n    /**\n     * power oFF　センサー停止\n       */\n    //% blockId=\"BME280_POWER_OFF\"\n    //% block=\"Power OFF Sensor/センサー停止\"\n    //% weight=21 blockGap=8\n    export function PowerOff() {\n        setreg(0xF4, 0)\n    }\n\n    /**\n     * Calculate Dewpoint　露点計算\n     */\n    //% block=\"Dewpoint / 露点\"\n    //% weight=60 blockGap=8\n    export function Dewpoint(): number {\n        get();\n        return T - Math.idiv(100 - H, 5)\n    }\n\n    /**\n     * Event Block\n     * イベントブロック\n     */\n    /**\n        * Triggered when pressure is Lower than a specified value.\n        * 気圧が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（Pa）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Pressuer / 気圧 <  %dat\" dat.defl=100000\n    export function PressureBelowThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (P < dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n         * Triggered when pressure is Higher than a specified value.\n         * 気圧が指定値より高い場合\n         *\n         * @param dat Threshold value / しきい値（Pa）\n         * @param body Action to perform / 実行する処理\n         */\n    //% block=\"Pressuer / 気圧 > %dat\" dat.defl=100000\n    export function PressureHigherThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (P > dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n        * Triggered when temprature is Lower than a specified value.\n        * 気温が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（C）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Temperature / 気温 < %dat\" dat.defl=10\n    export function TemperatureBelowThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (T < dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n      * Triggered when tempratuere is Lower than a specified value.\n        * 気温が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（C）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Temperature / 気温 > %dat\" dat.defl=30\n    export function TemperatureHigherThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (T > dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n      * Triggered when humidity is Lower than a specified value.\n        * 湿度が指定値より低い場合\n        *\n        * @param dat Threshold value / しきい値（C）\n        * @param body Action to perform / 実行する処理\n        */\n    //% block=\"Humidity / 湿度 < %dat\" dat.defl=10\n    export function HumidityBelowThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (H < dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n  * Triggered when humidity is Higher than a specified value.\n      * 湿度が指定値より高い場合\n      *\n      * @param dat Threshold value / しきい値（C）\n      * @param body Action to perform / 実行する処理\n      */\n    //% block=\"Humidity / 湿度 > %dat\" dat.defl=10\n    export function HumidityHigherThan(dat: number, body: () => void): void {\n        control.inBackground(function () {\n            while (true) {\n                get()\n                if (H > dat) {\n                    body()\n                }\n                basic.pause(1000)\n            }\n        })\n    }\n\n    /**\n         * Set the I2C address of the BME280 sensor.\n         * BME280 の I2C アドレスを設定\n         * \n         *  @param addr I2C address to set / 設定する I2C アドレス\n         */\n    //% blockId=\"BME280_SET_ADDRESS\"\n    //% block=\"I2C Address/I2Cアドレス %addr\"\n    //% weight=20 blockGap=8\n    export function Address(addr: BME280_I2C_ADDRESS) {\n        BME280_I2C_ADDR = addr\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":16335,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1743722293715,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"BME280多言語GitHub\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1743722428389}